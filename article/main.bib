
@book{donovan_go_2016,
	location = {New York},
	title = {The Go programming language},
	isbn = {978-0-13-419044-0},
	series = {Addison-Wesley professional computing series},
	abstract = {The Go Programming Language is the authoritative resource for any programmer who wants to learn Go. It shows how to write clear and idiomatic Go to solve real-world problems. The book does not assume prior knowledge of Go nor experience with any specific language, so you'll find it accessible whether you're most comfortable with {JavaScript}, Ruby, Python, Java, or C++. The first chapter is a tutorial on the basic concepts of Go, introduced through programs for file I/O and text processing, simple graphics, and web clients and servers. Early chapters cover the structural elements of Go programs: syntax, control flow, data types, and the organization of a program into packages, files, and functions. The examples illustrate many packages from the standard library and show how to create new ones of your own. Later chapters explain the package mechanism in more detail, and how to build, test, and maintain projects using the go tool. The chapters on methods and interfaces introduce Go's unconventional approach to object-oriented programming, in which methods can be declared on any type and interfaces are implicitly satisfied. They explain the key principles of encapsulation, composition, and substitutability using realistic examples. Two chapters on concurrency present in-depth approaches to this increasingly important topic. The first, which covers the basic mechanisms of goroutines and channels, illustrates the style known as communicating sequential processes for which Go is renowned. The second covers more traditional aspects of concurrency with shared variables. These chapters provide a solid foundation for programmers encountering concurrency for the first time. The final two chapters explore lower-level features of Go. One covers the art of metaprogramming using reflection. The other shows how to use the unsafe package to step outside the type system for special situations, and how to use the cgo tool to create Go bindings for C libraries. The book features hundreds of interesting and practical examples of well-written Go code that cover the whole language, its most important packages, and a wide range of applications. Each chapter has exercises to test your understanding and explore extensions and alternatives. Source code is freely available for download from http://gopl.io/ and may be conveniently fetched, built, and installed using the go get command},
	pagetotal = {1},
	publisher = {Addison-Wesley},
	author = {Donovan, Alan A. A.},
	editora = {Kernighan, Brian W.},
	editoratype = {collaborator},
	date = {2016},
}


@online{team_keycloak_nodate,
	title = {Keycloak},
	url = {https://www.keycloak.org/},
	abstract = {Keycloak - the open source identity and access management solution. Add single-sign-on and authentication to applications and secure services with minimum effort.},
	author = {Team, Keycloak},
	urldate = {2025-09-22},
	langid = {english},
	file = {Snapshot:/Users/eckhard.lehmann/Personal/SynologyDrive/Zotero/storage/Z5X4MBUH/www.keycloak.org.html:text/html},
}


@online{noauthor_vault_nodate,
	title = {Vault {\textbar} {HashiCorp} Developer},
	url = {https://developer.hashicorp.com/vault},
	abstract = {Explore Vault product documentation, tutorials, and examples.},
	titleaddon = {Vault {\textbar} {HashiCorp} Developer},
	urldate = {2025-09-22},
	langid = {english},
	file = {Snapshot:/Users/eckhard.lehmann/Personal/SynologyDrive/Zotero/storage/C88DINS9/vault.html:text/html},
}


@online{noauthor_terraform_registry_nodate,
	title = {Terraform Registry},
	url = {https://registry.terraform.io/},
	urldate = {2025-09-22},
	file = {Terraform Registry:/Users/eckhard.lehmann/Personal/SynologyDrive/Zotero/storage/LE8S4WVK/registry.terraform.io.html:text/html},
}


@online{noauthor_terraform_nodate,
	title = {Terraform {\textbar} {HashiCorp} Developer},
	url = {https://developer.hashicorp.com/terraform},
	abstract = {Explore Terraform product documentation, tutorials, and examples.},
	titleaddon = {Terraform {\textbar} {HashiCorp} Developer},
	urldate = {2025-09-22},
	langid = {english},
	file = {Snapshot:/Users/eckhard.lehmann/Personal/SynologyDrive/Zotero/storage/EBLLWGDJ/terraform.html:text/html},
}


@book{brikman_terraform_2022,
	location = {Beijing Boston Farnham Sebastopol Tokyo},
	edition = {Third edition},
	title = {Terraform: up \& running: writing infrastructure as code},
	isbn = {978-1-0981-1674-3},
	shorttitle = {Terraform},
	pagetotal = {432},
	publisher = {O'Reilly},
	author = {Brikman, Yevgeniy},
	date = {2022},
}


@online{noauthor_wiremock_nodate,
	title = {{WireMock} - flexible, open source {API} mocking},
	url = {https://wiremock.org/},
	abstract = {{WireMock} is a tool for building mock {APIs}. {API} mocking enables you build stable, predictable development environments when the {APIs} you depend on are unreliable or don’t exist.},
	titleaddon = {{WireMock}},
	urldate = {2025-09-26},
	langid = {english},
	file = {Snapshot:/Users/eckhard.lehmann/Personal/SynologyDrive/Zotero/storage/7MV4TN9T/wiremock.org.html:text/html},
}


@online{noauthor_wiremock_stateful_behavior_2025,
	title = {Wiremock - Stateful Behaviour},
	url = {https://wiremock.org/docs/stateful-behaviour/},
	abstract = {Most web services tend to have some state, which changes as you and others interact with it.},
	titleaddon = {{WireMock}},
	urldate = {2025-09-26},
	date = {2025-08-14},
	langid = {english},
	file = {Snapshot:/Users/eckhard.lehmann/Personal/SynologyDrive/Zotero/storage/QNCKQXDS/stateful-behaviour.html:text/html},
}


@online{ecky-l_terraform-provider-example_nodate,
	title = {ecky-l/terraform-provider-example: Illustrative example for a terraform provider},
	url = {https://github.com/ecky-l/terraform-provider-example},
	urldate = {2025-09-28},
	file = {ecky-l/terraform-provider-example\: Illustrative example for a terraform provider:/Users/eckhard.lehmann/Personal/SynologyDrive/Zotero/storage/TC294F6G/main.html:text/html},
}


@online{noauthor_terraform_framework_nodate,
	title = {Terraform plugin framework {\textbar} Terraform {\textbar} {HashiCorp} Developer},
	url = {https://developer.hashicorp.com/terraform/plugin/framework},
	abstract = {The Terraform plugin framework is an {SDK} that you can use to develop Terraform providers. Learn how the plugin framework works with Terraform core.},
	titleaddon = {Terraform plugin framework {\textbar} Terraform {\textbar} {HashiCorp} Developer},
	urldate = {2025-10-01},
	langid = {english},
	file = {Snapshot:/Users/eckhard.lehmann/Personal/SynologyDrive/Zotero/storage/ANXDKH37/framework.html:text/html},
}


@online{preston-werner_semantic_versioning_nodate,
	title = {Semantic Versioning 2.0.0},
	url = {https://semver.org/},
	abstract = {Semantic Versioning spec and website},
	titleaddon = {Semantic Versioning},
	author = {Preston-Werner, Tom},
	urldate = {2025-10-03},
	langid = {english},
	file = {Snapshot:/Users/eckhard.lehmann/Personal/SynologyDrive/Zotero/storage/ICMFU4WC/semver.org.html:text/html},
}


@online{noauthor_terraform_provider_installation_nodate,
	title = {Provider Installation},
	url = {https://developer.hashicorp.com/terraform/cli/config/config-file#provider-installation},
	abstract = {Learn how to create a `.terraformrc` or `terraform.rc` file to define Terraform {CLI} settings, including credentials, plugin caching, and provider installation.},
	titleaddon = {Create a Terraform {CLI} configuration file {\textbar} Terraform {\textbar} {HashiCorp} Developer},
	urldate = {2025-10-03},
	langid = {english},
	file = {Snapshot:/Users/eckhard.lehmann/Personal/SynologyDrive/Zotero/storage/AXME9XJS/config-file.html:text/html},
}


@online{noauthor_go_modules_nodate,
	title = {Using Go Modules - The Go Programming Language},
	url = {https://go.dev/blog/using-go-modules},
	abstract = {An introduction to the basic operations needed to get started with Go modules.},
	urldate = {2025-10-03},
	langid = {english},
	file = {Snapshot:/Users/eckhard.lehmann/Personal/SynologyDrive/Zotero/storage/2ND78DYN/using-go-modules.html:text/html},
}


@online{noauthor_terraform_acceptance_testing_nodate,
	title = {Acceptance tests {\textbar} Terraform {\textbar} {HashiCorp} Developer},
	url = {https://developer.hashicorp.com/terraform/plugin/framework/acctests},
	abstract = {Learn how to write acceptance tests for providers built on the framework. Acceptance tests help ensure your provider works as expected by imitating Terraform operations.},
	titleaddon = {Acceptance tests {\textbar} Terraform {\textbar} {HashiCorp} Developer},
	urldate = {2025-10-05},
	langid = {english},
	file = {Snapshot:/Users/eckhard.lehmann/Personal/SynologyDrive/Zotero/storage/UYRMDFG7/acctests.html:text/html},
}


@online{noauthor_testifymock_nodate,
	title = {testify/mock at master · stretchr/testify},
	url = {https://github.com/stretchr/testify/tree/master/mock},
	urldate = {2025-10-05},
	file = {testify/mock at master · stretchr/testify:/Users/eckhard.lehmann/Personal/SynologyDrive/Zotero/storage/PDQS78BK/mock.html:text/html},
}


@book{morris_infrastructure_as_code_2025,
	location = {Sebastopol, {CA}},
	edition = {Third edition},
	title = {Infrastructure as Code: Designing and Delivering Dynamic Systems for the Cloud Age},
	isbn = {978-1-0981-5035-8 978-1-0981-5031-0},
	shorttitle = {Infrastructure as Code},
	abstract = {Cover -- Copyright -- Table of Contents -- Preface -- Why I Wrote This Book -- What This Book Is and Isn't -- Who This Book Is For -- Principles, Practices, and Patterns -- The {FoodSpin} Examples -- For More -- Conventions Used in This Book -- O'Reilly Online Learning -- How to Contact Us -- Acknowledgments -- Part I. Foundations -- Chapter 1. What Is Infrastructure as Code? -- Infrastructure as Code -- From the Iron Age to the Cloud Age -- Cloud Age Approaches to Change Management -- The Path to the Cloud Age -- Strategic Goals and Infrastructure as Code -- System Architecture Goals and Infrastructure as Code -- Use Infrastructure as Code to Optimize for Change -- Myth: Infrastructure Doesn't Change Very Often -- Myth: We Can Build the Infrastructure First and Automate It Later -- Myth: Speed and Quality Are Trade-Offs -- The Four Key Metrics -- Core Practices for Infrastructure as Code -- Define Everything as Code -- Continually Test and Deliver All Work in Progress -- Build Small, Simple Pieces That Can Change Independently -- Conclusion -- Chapter 2. Principles of Cloud Infrastructure -- Assume Systems Are Unreliable -- Make Everything Reproducible -- Avoid Snowflake Systems -- Create Disposable Things -- Minimize Variation -- Ensure That Any Procedure Can Be Repeated -- Apply Software Design Principles to Infrastructure Code -- Conclusion -- Chapter 3. Infrastructure Platforms -- Infrastructure Platforms -- Infrastructure Resources -- {IaaS} in the Data Center -- Multicloud -- Engineering Platforms -- Platform Services -- Providing Platform Service Functionality -- Platform Delivery Services -- Application Delivery Services -- Infrastructure Delivery Services -- Platform Management Services -- Conclusion -- Chapter 4. Infrastructure as Code Tools and Languages -- Coding Infrastructure -- Moving Beyond Task-Based Scripting},
	pagetotal = {1},
	publisher = {O'Reilly},
	author = {Morris, Kief},
	date = {2025},
}


@online{noauthor_apache_kafka_nodate,
	title = {Apache Kafka},
	url = {https://kafka.apache.org/},
	abstract = {Apache Kafka: A Distributed Streaming Platform.},
	titleaddon = {Apache Kafka},
	urldate = {2025-10-11},
	langid = {english},
	file = {Snapshot:/Users/eckhard.lehmann/Personal/SynologyDrive/Zotero/storage/YCVJYTPA/kafka.apache.org.html:text/html},
}


@online{noauthor_confluent_nodate,
	title = {Confluent Cloud},
	url = {https://confluent.cloud/},
	urldate = {2025-10-11},
	file = {Confluent Cloud:/Users/eckhard.lehmann/Personal/SynologyDrive/Zotero/storage/BYST35ED/confluent.cloud.html:text/html},
}
